#!/bin/bash

# 使用 realpath 获取绝对路径
SCRIPT_PATH=$(realpath "$0")
SCRIPT_NAME=$(basename "$SCRIPT_PATH")

# 默认目录
SLIMY_DIR="/usr/share/gxde-k9/slimy/"
TIMER_DIR="/usr/share/gxde-k9/timer/"
PID_DIR="$HOME/.config/GXDE/gxde-k9/"
LOCKFILE="${PID_DIR}/gxde-k9-daemon.lock"

# 打印帮助信息
print_help() {
    cat << EOF
Usage: $0 [options]

Options:
  --slimy-dir <path>   Specify the directory to monitor for .slimy scripts.
  --timer-dir <path>   Specify the directory to monitor for .timer files.
  --pid-dir <path>     Specify the location for the PID DIR.
  -h                   Show this help message and exit.

Description:
  K9 Lick Daemon gen 2 monitors a specified directory for .slimy scripts
  and executes them. It also supports .timer files with crontab-like schedules.
  By default, it monitors $SLIMY_DIR and $TIMER_DIR.

Timer Example:
# <minute> <hour> <day> <month> <weekday>|<command>
0 7 * * 1 /home/user/scripts/weekly_task.sh

EOF
    exit 0
}

# 防止多次运行，带 PID 和进程路径校验
check_lockfile() {
    if [[ -f "$LOCKFILE" ]]; then
        existing_pid=$(cat "$LOCKFILE")
        if [[ -n "$existing_pid" && -e "/proc/$existing_pid" ]]; then
            # 检查进程路径是否匹配
            process_path=$(readlink -f "/proc/$existing_pid/exe" 2>/dev/null)
            if [[ "$process_path" == "$SCRIPT_PATH" ]]; then
                echo "Daemon is already running with PID $existing_pid. Exiting."
                exit 1
            else
                echo "Stale lockfile detected for PID $existing_pid (process path mismatch). Removing lockfile and continuing."
                rm -f "$LOCKFILE"
            fi
        else
            echo "Stale lockfile detected for non-existent PID $existing_pid. Removing lockfile and continuing."
            rm -f "$LOCKFILE"
        fi
    fi

    # 双重验证：检查是否已有同路径的脚本运行
    daemon_pid=$(pidof -x "$SCRIPT_PATH" | tr ' ' '\n' | grep -v $$)
    if [[ -n "$daemon_pid" ]]; then
        echo "Another instance of the daemon is already running with PID $daemon_pid. Exiting."
        exit 1
    fi
}

# 创建锁文件
create_lockfile() {
    mkdir -p "$(dirname "$LOCKFILE")"
    echo $$ > "$LOCKFILE"
}

# 删除锁文件
remove_lockfile() {
    rm -f "$LOCKFILE"
    exit 0
}

# 解析命令行参数
while [[ $# -gt 0 ]]; do
    case $1 in
        --slimy-dir)
            shift
            if [[ -z "$1" ]]; then
                echo "Error: --slimy-dir requires a directory path."
                exit 1
            fi
            SLIMY_DIR="$1"
            ;;
        --timer-dir)
            shift
            if [[ -z "$1" ]]; then
                echo "Error: --timer-dir requires a directory path."
                exit 1
            fi
            TIMER_DIR="$1"
            ;;
        --pid-dir)
            shift
            if [[ -z "$1" ]]; then
                echo "Error: --pid-dir requires a directory path."
                exit 1
            fi
            PID_DIR="$1"
            LOCKFILE="$1/gxde-k9-daemon.lock"
            ;;
        -h|--help)
            print_help
            ;;
        *)
            echo "Unknown option: $1"
            print_help
            ;;
    esac
    shift
done

export SLIMY_DIR
export TIMER_DIR
export PID_DIR
export LOCKFILE

# 检查并创建锁文件
check_lockfile
trap remove_lockfile SIGINT SIGTERM
create_lockfile

# 确保目录存在
if [[ ! -d "$SLIMY_DIR" ]]; then
    echo "Error: Slimy directory $SLIMY_DIR does not exist!"
    remove_lockfile
fi

if [[ ! -d "$TIMER_DIR" ]]; then
    echo "Error: Timer directory $TIMER_DIR does not exist!"
    remove_lockfile
fi

# 输出启动信息
echo "--------------------------------------------------------------"
echo "K9 Lick Daemon gen 2 is ready"
echo "I am $(whoami)"
echo "Watching slimy orders at $SLIMY_DIR"
echo "Monitoring timers at $TIMER_DIR"
echo "Lockfile location: $LOCKFILE"
echo "--------------------------------------------------------------"

# 运行所有 .slimy 脚本
run_slimy_scripts() {
    find "$SLIMY_DIR" -name "*.slimy" -exec bash -c '{}' \; &
}

# 解析 crontab-like 格式的定时器时间
is_time_matched() {
    local cron_time="$1"
    local minute hour day month weekday
    read -r minute hour day month weekday <<< "$(echo "$cron_time" | tr ' ' '\n')"
    
    local current_minute=$(date +'%M')
    local current_hour=$(date +'%H')
    local current_day=$(date +'%d')
    local current_month=$(date +'%m')
    local current_weekday=$(date +'%u') # 1=Monday ... 7=Sunday

    [[ "$minute" == "*" || "$minute" == "$current_minute" ]] &&
    [[ "$hour" == "*" || "$hour" == "$current_hour" ]] &&
    [[ "$day" == "*" || "$day" == "$current_day" ]] &&
    [[ "$month" == "*" || "$month" == "$current_month" ]] &&
    [[ "$weekday" == "*" || "$weekday" == "$current_weekday" ]]
}

# 监控 timer 文件
monitor_timers() {
    while true; do
        for timer_file in "$TIMER_DIR"/*.timer; do
            [[ -e "$timer_file" ]] || continue
            # 读取 timer 文件内容
            while IFS= read -r line; do
                schedule=$(echo "$line" | cut -d'|' -f1)
                command=$(echo "$line" | cut -d'|' -f2)
                
                # 检查定时器条件是否满足
                if is_time_matched "$schedule"; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S') - Running scheduled task: $command"
                    bash -c "$command" &
                fi
            done < "$timer_file"
        done
        sleep 60
    done
}

# 启动 slimy 监控 (每5秒执行一次)
watch_slimy_scripts() {
    while true; do
        run_slimy_scripts
        sleep 5
    done
}

# 启动 slimy 和 timer 监控
watch_slimy_scripts &
monitor_timers &
wait
